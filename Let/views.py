import datetime

import pyecharts.charts
import requests
from pyecharts.faker import Faker
from pyecharts.globals import ThemeType

from Let.tasks import add
from django.shortcuts import render, redirect

from django.http import HttpResponse
import numpy as np

from pyecharts import options as opts
from pyecharts.charts import Line,Page,Grid, Pie

Power_consumption_list = []
from pyecharts import options as opts
from pyecharts.charts import EffectScatter
from pyecharts.faker import Faker
# 图标数据获取跳转Views
from Let import models


# 电力数据爬取入库
def LetView(request):
    import bs4
    import requests
    from bs4 import BeautifulSoup
    res = requests.post(
        url='http://www.wap.cnyiot.com/(S(mjfpk2lgscja02m00mcj3otd))/nat/pay.aspx?mid=19500357280&chInfo=ch_share__chsub_CopyLink&apshareid=7cad8ac6-7aed-4391-b02f-23a9d11fbe37')
    # rex = requests.post(url='http://www.wap.cnyiot.com/(S(jd2c1lijcm5pmagoyoyqr2yk))/nat/pay.aspx?Method=getpayfee')
    soup = bs4.BeautifulSoup(res.text, 'html.parser')
    x = soup.find_all("label")
    end = x[1].string
    if models.elet.objects.filter(dataNum=datetime.datetime.now()):
        print('今日数据已存在')
    else:
        for elenum in models.elet.objects.values_list():
            Power_consumption_list.append(int(elenum[3]))
        #下列取出数据库中倒数第二个数据进行加减计算
        # enddian = models.elet.objects.all().order_by('-electricityNum')
        #将数据库倒数第二个数据赋值给X
        enddian = models.elet.objects.last()
        print(enddian)
        powerend = int(float(str(enddian))) - int(float(end))
        print(powerend)
        pinjunpower = np.mean(Power_consumption_list)
        models.elet.objects.create(electricityNum=end, Power_consumption=powerend, Average_power=pinjunpower,
                                   )
    return redirect('http://127.0.0.1:8000/app/test/')


##折线图标展示图表展示ViewS


def index(request):
    x = 0
    date_list = []

    # x = models.elet.objects.all()
    # print(x.values_list())
    # for elenum in models.elet.objects.values_list():
    #       date_list.append(elenum[1])
    #      average_value.append(elenum[2])
    #      Power_consumption_list.append(int(elenum[3]))
    #      Average_power_list.append(int(elenum[4]))
     # for test in models.elet.objects.values_list():
     #         pinjun.append(test[3])
    print()
    c = (
        Line()
        #此处使用列表解析直接从数据库中取出数据
        .add_xaxis([date[0] for date in models.elet.objects.values_list('dataNum')])
        # .add_xaxis([dataNum for dataNum in models.elet.objects.values_list('dataNum')])
        ##尝试添加直接从数据库中取出数据,如[ for i in modle.elet.obj.Power_consum.vlsu]
        .add_yaxis("昨日耗电量",[Power_consumption for Power_consumption in models.elet.objects.values_list('Power_consumption')], itemstyle_opts=opts.ItemStyleOpts(border_width=3))
        .add_yaxis("总表电量",[electricityNum for electricityNum in models.elet.objects.values_list('electricityNum')], itemstyle_opts=opts.ItemStyleOpts(border_width=3))
        .add_yaxis("平均每日耗电量",[Average_power for Average_power in models.elet.objects.values_list('Average_power')], itemstyle_opts=opts.ItemStyleOpts(border_width=3))
        .set_global_opts(title_opts=opts.TitleOpts(title="电力走势图", subtitle="记录了电力情况走势图",pos_left='1%'),
                         datazoom_opts=opts.DataZoomOpts(orient="horizontal",pos_top="47%",),
                         tooltip_opts=opts.TooltipOpts(axis_pointer_type="cross"),legend_opts=opts.LegendOpts(pos_left="10%"))
    )
    from pyecharts.charts import Bar
    bar = (
        Bar()
        .add_xaxis(Faker.choose())
        .add_yaxis("商家A", Faker.values())
        .add_yaxis("商家B", Faker.values())
        .set_global_opts(title_opts=opts.TitleOpts(title="Grid-Bar",pos_left='43%'),legend_opts=opts.LegendOpts(pos_left="47%"))
    )

    c2 = (
        EffectScatter()
        .add_xaxis(Faker.choose())
        .add_yaxis("", Faker.values())
        .set_global_opts(
            title_opts=opts.TitleOpts(title="折线散点图", pos_left='1%',pos_top="51%"),
            xaxis_opts=opts.AxisOpts(splitline_opts=opts.SplitLineOpts(is_show=True)),
            yaxis_opts=opts.AxisOpts(splitline_opts=opts.SplitLineOpts(is_show=True)),
            legend_opts=opts.LegendOpts(pos_right="20%")
        )
    )

    c3 = (
        Pie(init_opts=opts.InitOpts(theme='light',
                                      width='1000px',
                                      height='600px'))
        .add(
            "",
            [
                list(z)
                for z in zip(
                Faker.choose() + Faker.choose() + Faker.choose(),
                Faker.values() + Faker.values() + Faker.values(),
            )
            ],
            center=["80%", "20%"],
            radius=["10%", "25%"],
        )
        .set_global_opts(
            title_opts=opts.TitleOpts(title="饼图测试",pos_right="10%"),
            legend_opts=opts.LegendOpts(type_="scroll", pos_right="1%", orient="vertical"),
        )
        .set_series_opts(label_opts=opts.LabelOpts(formatter="{b}: {c}"))
    )

    Page = (
        #此处目标距离和CSS一样可以百分比也可以像素也可以是个数字
        Grid(init_opts=opts.InitOpts(width="1671px", height="1200px",theme=ThemeType.MACARONS,))
        # 通过设置图形相对位置，来调整是整个并行图是竖直放置，还是水平放置
        .add(c,grid_opts=opts.GridOpts(pos_left=0, pos_top="5%", width=500, height=480))
        .add(bar,grid_opts=opts.GridOpts(pos_left=600,pos_top="5%", width=500, height=480))
        .add(c2, grid_opts=opts.GridOpts(pos_left=0, pos_top="55%", width=500, height=480))
        .add(c3, grid_opts=opts.GridOpts(pos_left=0, pos_top="55%", width=100, height=100))

    )
    # print(end)
    return HttpResponse(Page.render_embed())


# ##视图测试ViewS
# def test(request):
#     enddian = models.elet.objects.all().order_by('electricityNum') #将选择数据库指定的字段转换成列表
#     x = enddian[1].electricityNum #选择字段的倒数第一个，可以获取字段的
#     print(int(float(x)))
#     y = enddian[0].electricityNum
#     print(int(float(y)))
#     return render(request,'index.html')
#


# 个人界面-集成电力图
def index_div(request):
    timesdata = models.elet.objects.all()
    return render(request, 'index_page/user/index.html', {'timesdata': timesdata})


##主页新闻页面
# def news_index(request):
#     res = requests.get(
#         'https://i.news.qq.com/trpc.qqnews_web.pc_base_srv.base_http_proxy/NinjaPageContentSync?pull_urls=news_top_2018')
#     date_list = res.json()
#     x = date_list['data']
#     for test in x:
#         if test['img_url'] == '':
#             continue
#         else:
#             end_jpg = requests.get(test['img_url'])
#             file = open('Let/static/images/News_jpg/' + test['article_id'] + '.png', 'w')
#             file.close()
#             with open('Let/static/images/News_jpg/' + test['article_id'] + '.png', 'wb') as file:
#                 # 每128个流遍历一次
#                 for data in end_jpg.iter_content(128):
#                     # 把流写入到文件，这个文件最后写入完成就是，selenium.png
#                     file.write(data)  # data相当于一块一块数据写入到我们的图片文件中
#     # for i in x:
#     #     end_list_url = i['url']
#     #     title = i['title']
#     #     imgurl = i['img_url']
#     return render(request, 'index_page/news_index.html', {'news': x, })


##此函数测试纯同步将新闻显示到前端中,速度极慢,打算测试异步
def news_test(request):
    res = requests.get(
        'https://i.news.qq.com/trpc.qqnews_web.pc_base_srv.base_http_proxy/NinjaPageContentSync?pull_urls=news_top_2018')
    date_list = res.json()
    x = date_list['data']
    for test in x:
        print(test['img_url'])
        if test['img_url'] == '':
            continue
        else:
            end_jpg = requests.get(test['img_url'])
            file = open('Let/static/images/News_jpg/' + test['article_id'] + '.png', 'w')
            file.close()
            with open('Let/static/images/News_jpg/' + test['article_id'] + '.png', 'wb') as file:
                # 每128个流遍历一次
                for data in end_jpg.iter_content(128):
                    # 把流写入到文件，这个文件最后写入完成就是，selenium.png
                    file.write(data)  # data相当于一块一块数据写入到我们的图片文件中
    return render(request, 'index_page/news/1.html', {'news': x})


##此函数测试将新闻数据加到数据库中
def newsadd(request):
    res = requests.get(
        'https://i.news.qq.com/trpc.qqnews_web.pc_base_srv.base_http_proxy/NinjaPageContentSync?pull_urls=news_top_2018')
    date_list = res.json()
    x = date_list['data']
    for i in x:
        if i['img_url'] == '':
            continue
        else:
            models.news.objects.get_or_create(news_title=i['title'], news_url=i['url'], img_url=i['img_url'],
                                              news_group=i['group'])
    return redirect('http://127.0.0.1:8000/app/index/')
