import datetime

from ckeditor.fields import RichTextField
from django.db import models
from django.urls import reverse


# Create your models here.


# 普通人员数据库
class none_user(models.Model):
    user_Rename = models.CharField('用户昵称', null=False, max_length=80, default=0)
    username = models.CharField('用户名', max_length=50, null=False)
    password = models.CharField('用户密码', max_length=50, null=False)
    useremail = models.CharField('用户邮箱', max_length=50, null=False, default=0)
    gender = (1, '男'), (0, '女')
    sex = models.IntegerField('用户性别', choices=gender, default=1)
    noneUser_id = models.CharField('普通用户ID', max_length=50)
    registration_date = models.DateField('注册时间', auto_now=True)
    user_acict_code = models.CharField('用户验证码', max_length=50, null=False, default=0)
    user_acict_statu = models.BooleanField('用户激活状态', default=0)

    class Meta:
        verbose_name = '用户管理'
        verbose_name_plural = '用户情况'

    def __str__(self):
        return self.user_Rename


# 博客数据库
class Article_library(models.Model):
    title = models.CharField('标题', max_length=50)
    Article_content = RichTextField('内容')
    publisher = models.CharField('发布者', max_length=30)
    release_time = models.DateField('发布时间', auto_now=True)
    Article_Comments = models.CharField('评论', max_length=100, null=True)

    # def get_absolute_url(self):
    #     return reverse('article:article_detail', args=[self.id])

    class Meta:
        verbose_name = '文章'
        verbose_name_plural = '文章详情'

    def __str__(self):
        return self.title


# 评论数据库
class Article_comment(models.Model):
    comment_id = models.CharField('评论ID', null=False, max_length=30)
    comment_content = models.CharField('评论内容', max_length=200)
    blog_ID = models.ForeignKey(Article_library, on_delete=models.CASCADE)
    creat_time = models.DateField('评论时间', auto_now=True)
    user_id = models.ForeignKey(none_user, on_delete=models.CASCADE)

    class Meta:
        verbose_name = '评论'
        verbose_name_plural = '评论详情'

    def __str__(self):
        return self.comment_id


#准备添加二级评论
class  Article_comment_rep(models.Model):
    user_id = models.ForeignKey(none_user, on_delete=models.CASCADE)