import datetime
import time

from django.core.paginator import Paginator
from django.shortcuts import render
from blog_index_html import models

from django.shortcuts import render, redirect

from blog_index_html import models
from blog_index_html import tasks
from Let import models as LetModle

# 邮件发件测试
from django.core.mail import send_mail


# Create your views here.
def blog_index(request):
    y = models.Article_library.objects.values().order_by("id")
    paginator = Paginator(y, 2)  # 每页显示25条
    page = request.GET.get('page')
    contacts = paginator.get_page(page)
    return render(request, 'index_page/blog_html/index.html', {'x': y, 'contacts': contacts})


# 查看文章详情，添加评论ID
def blog_cont(request, nid):
    row_object = models.Article_library.objects.get(id=nid)
    x = row_object.title
    y = row_object.Article_content
    z = models.Article_comment.objects.filter(blog_ID=nid)
    if request.method == 'GET':
        return render(request, 'index_page/blog_html/conton.html', {'x': x, 'y': y, 'z': z})
    elif request.method == 'POST':
        comment_nei = request.POST.get('message')
        author_id = request.session['username']
        if author_id:
            models.Article_comment.objects.create(comment_content=comment_nei,
                                                  creat_time=datetime.datetime.now(), blog_ID_id=nid,
                                                  user_id_id=models.none_user.objects.get(username=author_id).id,comment_id=datetime.datetime.now())
            return render(request, 'index_page/blog_html/conton.html', {'x': x, 'y': y, 'z': z})
        else:
            return redirect('/blog/login/')


def blog_about(request):
    return render(request, 'index_page/blog_html/about.html')


def contact(request):
    return render(request, 'index_page/blog_html/contact.html')


def send_email(request):
    send_mail(
        subject='测试网站标题',
        message='测试网站内容',
        from_email='watch.dog@qq.com',
        recipient_list=['watch.dog@qq.com'],
        fail_silently=False
    )
    return request('OK')


def user_reg(request):
    email_cod = []
    if request.method == 'GET':
        return render(request, 'index_page/user/user_reg.html')
    if request.method == 'POST':
        # import random
        # str1 = '0123456789'
        # rand_str = ''
        # for i in range(0, 6):
        #     rand_str += str1[random.randrange(0, len(str1))]

        rename = request.POST.get('Rname')
        username = request.POST.get('name')
        password = request.POST.get('password')
        email = request.POST.get('email')

        Pbbool = models.none_user.objects.filter(username=username).exists()  ##用户是否存在数据库中---验证
        if Pbbool:
            x = ('该用户已经存在')
            return render(request, 'index_page/user/user_reg.html', {'x': x})
        else:
            import random
            str1 = '0123456789'
            rand_str = ''
            for i in range(0, 6):
                rand_str += str1[random.randrange(0, len(str1))]
            models.none_user.objects.create(user_Rename=rename, username=username, password=password, useremail=email,
                                            user_acict_code=rand_str, user_acict_statu=0)
            # send_mail(
            #          subject='Avnext网站验证码',
            #          message='你的验证码为:'+ rand_str +'请不要将你的验证码告诉其他人',
            #          from_email='watch.dog@qq.com',
            #          recipient_list= [email] ,
            #          fail_silently=False)
            # 此处给task，发送邮件任务传递两个参数，一个参数为；用户的EMAIL，一个参数为当前生产的ID

            testmail = tasks.send_html_mail.delay(email, rand_str=rand_str)
            return redirect('/blog/user_code/')


def user_login(request):
    if request.method == 'GET':
        return render(request, 'index_page/user/user_login.html')
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            if models.none_user.objects.get(username=username):
                if models.none_user.objects.get(password=password):
                    request.session['username'] = username
                    request.session.set_expiry(600)
                    x = LetModle.elet.objects.all()
                    return redirect('/blog', {'x': x})
                else:
                    pass
            else:
                x = '对不起用户或者密码错误'
                return render(request, 'index_page/user/user_login.html', {'x': x})
        except:
            x = '对不起用户或者密码错误'
            return render(request, 'index_page/user/user_login.html', {'x': x})


# 此处为验证码对应用户ID验证,验证码反查个人的用户名,然后使用save保存指定字段.将账号变成激活状态
def user_code(request):
    if request.method == 'GET':
        return render(request, 'index_page/user/user_code.html')
    elif request.method == 'POST':
        email_stat_cod = request.POST.get('email_code')
        test_mail = models.none_user.objects.filter(user_acict_code=email_stat_cod)  ##此处对比查找和激活码相对应的ID
        print(test_mail)
        if test_mail:  # 如果查找到了激活码那么进入下面的循环
            for record in test_mail:
                x = models.none_user.objects.get(username=record.username)
                x.user_acict_statu = 1  # 将激活状态改成1
                x.save()  # 数据库保存
                return redirect('http://127.0.0.1:8000/app/index/')
        else:
            x = '对不起，验证码错误请重试'
            return render(request, 'index_page/user/user_code.html', {'x': x})


def user_logout(request):
    del request.session['username']
    return redirect('/blog')
